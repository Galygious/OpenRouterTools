// OpenRouter Model Selection and Chat Interface

document.addEventListener('DOMContentLoaded', () => {
  // Initialize Select2
  $('.select2').select2({
    width: '100%',
    theme: 'classic',
    placeholder: function() {
      return $(this).data('placeholder') || $(this).find('option:first').text();
    }
  });

  // Constants
  const OPENROUTER_API = {
    BASE_URL: 'https://openrouter.ai/api',
    MODELS_ENDPOINT: '/v1/models',
    CHAT_ENDPOINT: '/v1/chat/completions'
  };

  // DOM Element References
  const apiKey = document.getElementById('api-key');
  const saveKeyBtn = document.getElementById('save-key');
  const statsTab = document.getElementById('stats-tab');
  const chatTab = document.getElementById('chat-tab');
  const statsView = document.getElementById('stats-view');
  const chatView = document.getElementById('chat-view');
  
  // Stats View Elements
  const modelInput = document.getElementById('model-input');
  const fetchButton = document.getElementById('fetch-button');
  const fetchAllButton = document.getElementById('fetch-all-button');
  const suggestionsContainer = document.getElementById('suggestions');
  const errorMessage = document.getElementById('error-message');
  const loadingIndicator = document.getElementById('loading');
  const statsTable = document.getElementById('stats-table').querySelector('tbody');

  // Model Selection Dropdowns
  const creatorDropdown = $('#creator-dropdown');
  const modelDropdown = $('#model-dropdown');
  const versionDropdown = $('#version-dropdown');
  const providerDropdown = $('#provider-dropdown');

  // Model Details Elements
  const pricingPrompt = document.getElementById('prompt-price');
  const pricingCompletion = document.getElementById('completion-price');
  const modelDescription = document.getElementById('model-description');

  // State Management
  let modelData = [];
  let apiKeyValue = localStorage.getItem('openrouter_api_key');

  // API Key Management
  if (apiKeyValue) {
    apiKey.value = apiKeyValue;
  }

  saveKeyBtn.addEventListener('click', () => {
    const key = apiKey.value.trim();
    if (!key) {
      showError('Please enter an API key');
      return;
    }
    localStorage.setItem('openrouter_api_key', key);
    apiKeyValue = key;
    fetchModelData();
  });

  // API Utilities
  async function fetchWithAuth(url, options = {}) {
    if (!apiKeyValue) {
      throw new Error('API key is required');
    }

    const headers = {
      'Authorization': `Bearer ${apiKeyValue}`,
      'HTTP-Referer': window.location.origin,
      ...options.headers
    };

    const response = await fetch(url, { ...options, headers });
    
    if (!response.ok) {
      if (response.status === 401) {
        localStorage.removeItem('openrouter_api_key');
        throw new Error('Invalid API key');
      }
      throw new Error(`API request failed: ${response.statusText}`);
    }

    return response.json();
  }

  function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.remove('hidden');
    setTimeout(() => {
      errorMessage.classList.add('hidden');
    }, 5000);
  }

  function showLoading(show = true) {
    loadingIndicator.classList.toggle('hidden', !show);
  }

  // Model Data Management
  async function fetchModelData() {
    showLoading(true);
    errorMessage.classList.add('hidden');
    statsTable.innerHTML = '';

    try {
      const data = await fetchWithAuth(`${OPENROUTER_API.BASE_URL}${OPENROUTER_API.MODELS_ENDPOINT}`);
      modelData = data.data;
      populateCreatorDropdown();
      setupModelSearch();
    } catch (error) {
      console.error('Error fetching model data:', error);
      showError(error.message);
    } finally {
      showLoading(false);
    }
  }

  function setupModelSearch() {
    modelInput.addEventListener('input', () => {
      const searchTerm = modelInput.value.toLowerCase();
      if (searchTerm.length < 2) {
        suggestionsContainer.classList.add('hidden');
        return;
      }

      const matches = modelData.filter(model => 
        model.id?.toLowerCase().includes(searchTerm) ||
        model.name?.toLowerCase().includes(searchTerm)
      );

      suggestionsContainer.innerHTML = '';
      matches.slice(0, 5).forEach(model => {
        const li = document.createElement('li');
        li.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer';
        li.textContent = `${model.name} (${model.id})`;
        li.addEventListener('click', () => {
          modelInput.value = model.id;
          suggestionsContainer.classList.add('hidden');
          fetchModelStats(model.id);
        });
        suggestionsContainer.appendChild(li);
      });
      suggestionsContainer.classList.remove('hidden');
    });
  }

  async function fetchModelStats(modelId) {
    showLoading(true);
    errorMessage.classList.add('hidden');
    statsTable.innerHTML = '';

    try {
      const model = modelData.find(m => m.id === modelId);
      if (!model) {
        throw new Error('Model not found');
      }

      const row = document.createElement('tr');
      row.className = 'hover:bg-gray-50';
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.id || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.provider || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.context_length || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.max_completion_tokens || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.pricing?.prompt || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.pricing?.completion || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.latency?.avg?.toFixed(2) || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.throughput?.toFixed(2) || '-'}</td>
      `;
      statsTable.appendChild(row);
    } catch (error) {
      showError(error.message);
    } finally {
      showLoading(false);
    }
  }

  async function fetchAllStats() {
    showLoading(true);
    errorMessage.classList.add('hidden');
    statsTable.innerHTML = '';

    try {
      modelData.forEach(model => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.id || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.provider || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.context_length || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.max_completion_tokens || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.pricing?.prompt || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.pricing?.completion || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.latency?.avg?.toFixed(2) || '-'}</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${model.throughput?.toFixed(2) || '-'}</td>
        `;
        statsTable.appendChild(row);
      });
    } catch (error) {
      showError('Failed to fetch all stats');
    } finally {
      showLoading(false);
    }
  }

  // Event Listeners for Stats View
  fetchButton.addEventListener('click', () => {
    const modelId = modelInput.value.trim();
    if (modelId) {
      fetchModelStats(modelId);
    } else {
      showError('Please enter a model name');
    }
  });

  fetchAllButton.addEventListener('click', fetchAllStats);

  function populateCreatorDropdown() {
    const creators = [...new Set(modelData.map(model => model.provider))];
    creators.sort();

    creatorDropdown.empty().append('<option value="">Select a provider...</option>');
    creators.forEach(creator => {
      creatorDropdown.append(new Option(creator, creator));
    });

    creatorDropdown.on('change', handleCreatorSelection);
  }

  function handleCreatorSelection() {
    const selectedCreator = creatorDropdown.val();
    
    // Reset and disable subsequent dropdowns
    modelDropdown.empty().append('<option value="">Select a model...</option>').prop('disabled', true);
    versionDropdown.empty().append('<option value="">Select a version...</option>').prop('disabled', true);
    providerDropdown.empty().append('<option value="">Select a configuration...</option>').prop('disabled', true);

    if (!selectedCreator) return;

    const creatorModels = modelData.filter(model => model.provider === selectedCreator);
    const uniqueModels = [...new Set(creatorModels.map(model => model.name))];
    
    uniqueModels.sort();
    uniqueModels.forEach(modelName => {
      modelDropdown.append(new Option(modelName, modelName));
    });

    modelDropdown.prop('disabled', false).trigger('change');
  }

  function handleModelSelection() {
    const selectedModel = modelDropdown.val();
    
    // Reset and disable subsequent dropdowns
    versionDropdown.empty().append('<option value="">Select a version...</option>').prop('disabled', true);
    providerDropdown.empty().append('<option value="">Select a configuration...</option>').prop('disabled', true);

    if (!selectedModel) return;

    const modelVersions = modelData.filter(model => model.name === selectedModel);
    const uniqueVersions = [...new Set(modelVersions.map(model => model.version))];
    
    uniqueVersions.sort();
    uniqueVersions.forEach(version => {
      versionDropdown.append(new Option(version || 'default', version));
    });

    versionDropdown.prop('disabled', false).trigger('change');
  }

  function handleVersionSelection() {
    const selectedVersion = versionDropdown.val();
    const selectedModel = modelDropdown.val();
    const selectedCreator = creatorDropdown.val();
    
    providerDropdown.empty().append('<option value="">Select a configuration...</option>').prop('disabled', true);

    if (!selectedVersion) return;

    const configurations = modelData.filter(model => 
      model.provider === selectedCreator &&
      model.name === selectedModel &&
      model.version === selectedVersion
    );

    configurations.sort((a, b) => (a.pricing?.prompt || 0) - (b.pricing?.prompt || 0));
    
    configurations.forEach(config => {
      const optionText = `${config.provider} - $${config.pricing?.prompt || '0'}/prompt, $${config.pricing?.completion || '0'}/completion`;
      providerDropdown.append(new Option(optionText, config.id));
    });

    providerDropdown.prop('disabled', false).trigger('change');
  }

  function handleProviderSelection() {
    const selectedConfig = providerDropdown.val();
    if (!selectedConfig) return;

    const selectedModelEntry = modelData.find(model => model.id === selectedConfig);
    if (selectedModelEntry) {
      pricingPrompt.textContent = `Prompt Price: $${selectedModelEntry.pricing?.prompt || '0'} per token`;
      pricingCompletion.textContent = `Completion Price: $${selectedModelEntry.pricing?.completion || '0'} per token`;
      modelDescription.textContent = selectedModelEntry.description || 'No description available.';
    }
  }

  // Initialize Select2 event handlers
  modelDropdown.on('change', handleModelSelection);
  versionDropdown.on('change', handleVersionSelection);
  providerDropdown.on('change', handleProviderSelection);

  // Tab Navigation
  statsTab.addEventListener('click', () => {
    statsTab.classList.add('active', 'bg-blue-500', 'text-white');
    chatTab.classList.remove('active', 'bg-blue-500', 'text-white');
    statsView.classList.remove('hidden');
    chatView.classList.add('hidden');
    statsTab.setAttribute('aria-pressed', 'true');
    chatTab.setAttribute('aria-pressed', 'false');
  });

  chatTab.addEventListener('click', () => {
    chatTab.classList.add('active', 'bg-blue-500', 'text-white');
    statsTab.classList.remove('active', 'bg-blue-500', 'text-white');
    chatView.classList.remove('hidden');
    statsView.classList.add('hidden');
    chatTab.setAttribute('aria-pressed', 'true');
    statsTab.setAttribute('aria-pressed', 'false');
  });

  // Initialize if API key exists
  if (apiKeyValue) {
    fetchModelData();
  }
});
